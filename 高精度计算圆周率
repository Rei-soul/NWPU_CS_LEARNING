#include<stdio.h>
#include<stdlib.h>
#include<math.h>
typedef struct node {
	int data;
	struct node* pre;
	struct node* next;
}Node;

int Cal_k(int n) {
	double k=1;
	double sum = 0;
	while (sum<=(double)n+1) {
		sum = sum + log10((2 * k + 1) / k);
		k++;
	}
	return k-1;
}
int PtrIsNull(Node* L) {
	if (L == NULL) {
		return 1;
	}
	else
		return 0;
}
void InitDLinkList(Node* DLinkList,int n) {
	Node* temp = DLinkList;
	for (int i = 0; i < n+50; i++) {
		Node* p = (Node*)malloc(sizeof(Node));
		if (PtrIsNull(p)) {
			printf("error!\n");
			return ;
		}
		p->data = 0;
		p->pre = temp;
		temp->next = p;
		temp = temp->next;
	}
	temp->next = NULL;
}
void CoutLinkList(Node* L) {
	Node* temp = L->next;
	while (temp != NULL) {
		printf("%d", temp->data);
		temp = temp->next;
	}
	printf("\n");
}
Node* CreateDLinkList(int n) {
	Node* DLinkList = (Node*)malloc(sizeof(Node));
	if (PtrIsNull(DLinkList)) {
		printf("error!\n");
	}
	DLinkList->next = NULL;
	DLinkList->pre = NULL;
	//生成头结点完毕
	InitDLinkList(DLinkList,n);
	//CoutLinkList(DLinkList);
	//长度为600的链表生成完毕
	return DLinkList;
}
void chengfa(Node* num ,Node*num_tail, int n) {
	Node* temp = num_tail;
	int ret = 0;
	while (temp != num) {
		int tem = temp->data;
		temp->data = (temp->data * n+ret) % 10;
		ret= (tem * n+ret)/10;
		//temp->pre->data += ret;
		temp = temp->pre;
		//CoutLinkList(num);
	}
}
//void chufa(Node* L, int n) {
//	Node* temp = L->next;
//	int ret=0;
//	while (temp != NULL) {
//		temp->data = (temp->data+ret)/n;
//		ret = ret * 10;
//		temp = temp->next;
//	}
//}
void chufa(Node* num, int b) {
	Node* temp = num->next;
	int ret = 0;
	while (temp != NULL) {
		int a = temp->data+ret;
		temp->data =  a/b;
		ret = (a % b) * 10;
		temp = temp->next;
	}
}
int main() {
	int n;//保留几位小数
	int k;//对应的k
	scanf("%d", &n);
	k = Cal_k(n);//计算k是多少
	//printf("k=%d\n", k);//测试用
	//生成头结点
	Node* result = CreateDLinkList(n);
	Node* num = CreateDLinkList(n);
	Node* Temp = CreateDLinkList(n);
	//******************************
	Node* Resultp = result->next;
	Node* Nump = num->next;
	//******************************
	Resultp->data = 2;
	Nump->data = 2;
	Node* result_tail = result;
	Node* num_tail = Nump;

	while (result_tail->next != NULL) {
		result_tail = result_tail->next;
	}
	while (num_tail->next != NULL) {
		num_tail = num_tail->next;
	}

	//*********************************************
	Node* NumTail = num_tail;//永远储存最后结点
	Node* ResultTail = result_tail;//永远储存最后结点
	//result_tail和num_tail都指向最后一个结点
	//*********************************************


	for (int i = 1, j = 3; i <= k; i++, j += 2) {
		num_tail = NumTail;
		result_tail = ResultTail;
		//num->data=num->data*i/j;
		//result->data+=num->data;
		chufa(num, j);
		//CoutLinkList(num);
		chengfa(num, num_tail,i);
		//CoutLinkList(num);
		//chengfa(num,num_tail,2);
		num_tail = NumTail;
		result_tail = ResultTail;
		//leijia(result, result_tail, num, num_tail);
		int ret = 0;
		while (result_tail != result) {
			

			int a = result_tail->data;

			result_tail->data = (result_tail->data + num_tail->data) % 10;
			
			ret = (a + num_tail->data) / 10;
			result_tail->pre->data += ret;
			result_tail = result_tail->pre;
			num_tail = num_tail->pre;
			//CoutLinkList(result);
		}
		//CoutLinkList(result);
		//printf("循环次数：%d\n", i);
	}
	result_tail = ResultTail;
	printf("%d.", Resultp->data);
	Resultp = Resultp->next;
	for (int i = 0; i < n ; i++) {
		printf("%d", Resultp->data);
		Resultp = Resultp->next;
	}
}
